// Code generated by cmd/lexgen (see Makefile's lexgen); DO NOT EDIT.

package bsky

// schema: app.bsky.unspecced.checkHandleAvailability

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/bluesky-social/indigo/lex/util"
)

// UnspeccedCheckHandleAvailability_Output is the output of a app.bsky.unspecced.checkHandleAvailability call.
type UnspeccedCheckHandleAvailability_Output struct {
	// handle: Echo of the input handle.
	Handle string                                          `json:"handle" cborgen:"handle"`
	Result *UnspeccedCheckHandleAvailability_Output_Result `json:"result" cborgen:"result"`
}

type UnspeccedCheckHandleAvailability_Output_Result struct {
	UnspeccedCheckHandleAvailability_ResultAvailable   *UnspeccedCheckHandleAvailability_ResultAvailable
	UnspeccedCheckHandleAvailability_ResultUnavailable *UnspeccedCheckHandleAvailability_ResultUnavailable
}

func (t *UnspeccedCheckHandleAvailability_Output_Result) MarshalJSON() ([]byte, error) {
	if t.UnspeccedCheckHandleAvailability_ResultAvailable != nil {
		t.UnspeccedCheckHandleAvailability_ResultAvailable.LexiconTypeID = "app.bsky.unspecced.checkHandleAvailability#resultAvailable"
		return json.Marshal(t.UnspeccedCheckHandleAvailability_ResultAvailable)
	}
	if t.UnspeccedCheckHandleAvailability_ResultUnavailable != nil {
		t.UnspeccedCheckHandleAvailability_ResultUnavailable.LexiconTypeID = "app.bsky.unspecced.checkHandleAvailability#resultUnavailable"
		return json.Marshal(t.UnspeccedCheckHandleAvailability_ResultUnavailable)
	}
	return nil, fmt.Errorf("cannot marshal empty enum")
}
func (t *UnspeccedCheckHandleAvailability_Output_Result) UnmarshalJSON(b []byte) error {
	typ, err := util.TypeExtract(b)
	if err != nil {
		return err
	}

	switch typ {
	case "app.bsky.unspecced.checkHandleAvailability#resultAvailable":
		t.UnspeccedCheckHandleAvailability_ResultAvailable = new(UnspeccedCheckHandleAvailability_ResultAvailable)
		return json.Unmarshal(b, t.UnspeccedCheckHandleAvailability_ResultAvailable)
	case "app.bsky.unspecced.checkHandleAvailability#resultUnavailable":
		t.UnspeccedCheckHandleAvailability_ResultUnavailable = new(UnspeccedCheckHandleAvailability_ResultUnavailable)
		return json.Unmarshal(b, t.UnspeccedCheckHandleAvailability_ResultUnavailable)

	default:
		return nil
	}
}

// UnspeccedCheckHandleAvailability_ResultAvailable is a "resultAvailable" in the app.bsky.unspecced.checkHandleAvailability schema.
//
// Indicates the provided handle is available.
//
// RECORDTYPE: UnspeccedCheckHandleAvailability_ResultAvailable
type UnspeccedCheckHandleAvailability_ResultAvailable struct {
	LexiconTypeID string `json:"$type,const=app.bsky.unspecced.checkHandleAvailability#resultAvailable" cborgen:"$type,const=app.bsky.unspecced.checkHandleAvailability#resultAvailable"`
}

// UnspeccedCheckHandleAvailability_ResultUnavailable is a "resultUnavailable" in the app.bsky.unspecced.checkHandleAvailability schema.
//
// Indicates the provided handle is unavailable and gives suggestions of available handles.
//
// RECORDTYPE: UnspeccedCheckHandleAvailability_ResultUnavailable
type UnspeccedCheckHandleAvailability_ResultUnavailable struct {
	LexiconTypeID string `json:"$type,const=app.bsky.unspecced.checkHandleAvailability#resultUnavailable" cborgen:"$type,const=app.bsky.unspecced.checkHandleAvailability#resultUnavailable"`
	// suggestions: List of suggested handles based on the provided inputs.
	Suggestions []*UnspeccedCheckHandleAvailability_Suggestion `json:"suggestions" cborgen:"suggestions"`
}

// UnspeccedCheckHandleAvailability_Suggestion is a "suggestion" in the app.bsky.unspecced.checkHandleAvailability schema.
type UnspeccedCheckHandleAvailability_Suggestion struct {
	Handle string `json:"handle" cborgen:"handle"`
	// method: Method used to build this suggestion. Should be considered opaque to clients. Can be used for metrics.
	Method string `json:"method" cborgen:"method"`
}

// UnspeccedCheckHandleAvailability calls the XRPC method "app.bsky.unspecced.checkHandleAvailability".
//
// birthDate: User-provided birth date. Might be used to build handle suggestions.
// email: User-provided email. Might be used to build handle suggestions.
// handle: Tentative handle. Will be checked for availability or used to build handle suggestions.
func UnspeccedCheckHandleAvailability(ctx context.Context, c util.LexClient, birthDate string, email string, handle string) (*UnspeccedCheckHandleAvailability_Output, error) {
	var out UnspeccedCheckHandleAvailability_Output

	params := map[string]interface{}{}
	if birthDate != "" {
		params["birthDate"] = birthDate
	}
	if email != "" {
		params["email"] = email
	}
	params["handle"] = handle
	if err := c.LexDo(ctx, util.Query, "", "app.bsky.unspecced.checkHandleAvailability", params, nil, &out); err != nil {
		return nil, err
	}

	return &out, nil
}
