// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package foodios

import (
	"fmt"
	"io"
	"math"
	"sort"

	atproto "github.com/bluesky-social/indigo/api/atproto"
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *FeedRecipePost) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{162}); err != nil {
		return err
	}

	// t.LexiconTypeID (string) (string)
	if len("$type") > 1000000 {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("app.foodios.feed.recipePost"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("app.foodios.feed.recipePost")); err != nil {
		return err
	}

	// t.CreatedAt (string) (string)
	if len("createdAt") > 1000000 {
		return xerrors.Errorf("Value in field \"createdAt\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("createdAt"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("createdAt")); err != nil {
		return err
	}

	if len(t.CreatedAt) > 1000000 {
		return xerrors.Errorf("Value in field t.CreatedAt was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.CreatedAt))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.CreatedAt)); err != nil {
		return err
	}
	return nil
}

func (t *FeedRecipePost) UnmarshalCBOR(r io.Reader) (err error) {
	*t = FeedRecipePost{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("FeedRecipePost: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 9)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 1000000)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.LexiconTypeID (string) (string)
		case "$type":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.LexiconTypeID = string(sval)
			}
			// t.CreatedAt (string) (string)
		case "createdAt":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.CreatedAt = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *FeedRecipeRevision) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 13

	if t.Embed == nil {
		fieldCount--
	}

	if t.Images == nil {
		fieldCount--
	}

	if t.Labels == nil {
		fieldCount--
	}

	if t.Langs == nil {
		fieldCount--
	}

	if t.ParentRevisionRef == nil {
		fieldCount--
	}

	if t.Tags == nil {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.Tags ([]string) (slice)
	if t.Tags != nil {

		if len("tags") > 1000000 {
			return xerrors.Errorf("Value in field \"tags\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("tags"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("tags")); err != nil {
			return err
		}

		if len(t.Tags) > 8192 {
			return xerrors.Errorf("Slice value in field t.Tags was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Tags))); err != nil {
			return err
		}
		for _, v := range t.Tags {
			if len(v) > 1000000 {
				return xerrors.Errorf("Value in field v was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(v))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(v)); err != nil {
				return err
			}

		}
	}

	// t.Text (string) (string)
	if len("text") > 1000000 {
		return xerrors.Errorf("Value in field \"text\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("text"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("text")); err != nil {
		return err
	}

	if len(t.Text) > 1000000 {
		return xerrors.Errorf("Value in field t.Text was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Text))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Text)); err != nil {
		return err
	}

	// t.LexiconTypeID (string) (string)
	if len("$type") > 1000000 {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("app.foodios.feed.recipeRevision"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("app.foodios.feed.recipeRevision")); err != nil {
		return err
	}

	// t.Embed (foodios.FeedRecipeRevision_Embed) (struct)
	if t.Embed != nil {

		if len("embed") > 1000000 {
			return xerrors.Errorf("Value in field \"embed\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("embed"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("embed")); err != nil {
			return err
		}

		if err := t.Embed.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.Langs ([]string) (slice)
	if t.Langs != nil {

		if len("langs") > 1000000 {
			return xerrors.Errorf("Value in field \"langs\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("langs"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("langs")); err != nil {
			return err
		}

		if len(t.Langs) > 8192 {
			return xerrors.Errorf("Slice value in field t.Langs was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Langs))); err != nil {
			return err
		}
		for _, v := range t.Langs {
			if len(v) > 1000000 {
				return xerrors.Errorf("Value in field v was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(v))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(v)); err != nil {
				return err
			}

		}
	}

	// t.Steps ([]*foodios.FeedRecipeRevision_Step) (slice)
	if len("steps") > 1000000 {
		return xerrors.Errorf("Value in field \"steps\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("steps"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("steps")); err != nil {
		return err
	}

	if len(t.Steps) > 8192 {
		return xerrors.Errorf("Slice value in field t.Steps was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Steps))); err != nil {
		return err
	}
	for _, v := range t.Steps {
		if err := v.MarshalCBOR(cw); err != nil {
			return err
		}

	}

	// t.Title (string) (string)
	if len("title") > 1000000 {
		return xerrors.Errorf("Value in field \"title\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("title"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("title")); err != nil {
		return err
	}

	if len(t.Title) > 1000000 {
		return xerrors.Errorf("Value in field t.Title was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Title))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Title)); err != nil {
		return err
	}

	// t.Images (foodios.FeedRecipeRevision_Images) (struct)
	if t.Images != nil {

		if len("images") > 1000000 {
			return xerrors.Errorf("Value in field \"images\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("images"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("images")); err != nil {
			return err
		}

		if err := t.Images.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.Labels (foodios.FeedRecipeRevision_Labels) (struct)
	if t.Labels != nil {

		if len("labels") > 1000000 {
			return xerrors.Errorf("Value in field \"labels\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("labels"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("labels")); err != nil {
			return err
		}

		if err := t.Labels.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.CreatedAt (string) (string)
	if len("createdAt") > 1000000 {
		return xerrors.Errorf("Value in field \"createdAt\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("createdAt"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("createdAt")); err != nil {
		return err
	}

	if len(t.CreatedAt) > 1000000 {
		return xerrors.Errorf("Value in field t.CreatedAt was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.CreatedAt))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.CreatedAt)); err != nil {
		return err
	}

	// t.Ingredients ([]*foodios.FeedRecipeRevision_Ingredient) (slice)
	if len("ingredients") > 1000000 {
		return xerrors.Errorf("Value in field \"ingredients\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("ingredients"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("ingredients")); err != nil {
		return err
	}

	if len(t.Ingredients) > 8192 {
		return xerrors.Errorf("Slice value in field t.Ingredients was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Ingredients))); err != nil {
		return err
	}
	for _, v := range t.Ingredients {
		if err := v.MarshalCBOR(cw); err != nil {
			return err
		}

	}

	// t.RecipePostRef (atproto.RepoStrongRef) (struct)
	if len("recipePostRef") > 1000000 {
		return xerrors.Errorf("Value in field \"recipePostRef\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("recipePostRef"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("recipePostRef")); err != nil {
		return err
	}

	if err := t.RecipePostRef.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.ParentRevisionRef (atproto.RepoStrongRef) (struct)
	if t.ParentRevisionRef != nil {

		if len("parentRevisionRef") > 1000000 {
			return xerrors.Errorf("Value in field \"parentRevisionRef\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("parentRevisionRef"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("parentRevisionRef")); err != nil {
			return err
		}

		if err := t.ParentRevisionRef.MarshalCBOR(cw); err != nil {
			return err
		}
	}
	return nil
}

func (t *FeedRecipeRevision) UnmarshalCBOR(r io.Reader) (err error) {
	*t = FeedRecipeRevision{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("FeedRecipeRevision: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 17)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 1000000)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Tags ([]string) (slice)
		case "tags":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.Tags: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Tags = make([]string, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					{
						sval, err := cbg.ReadStringWithMax(cr, 1000000)
						if err != nil {
							return err
						}

						t.Tags[i] = string(sval)
					}

				}
			}
			// t.Text (string) (string)
		case "text":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.Text = string(sval)
			}
			// t.LexiconTypeID (string) (string)
		case "$type":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.LexiconTypeID = string(sval)
			}
			// t.Embed (foodios.FeedRecipeRevision_Embed) (struct)
		case "embed":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.Embed = new(FeedRecipeRevision_Embed)
					if err := t.Embed.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.Embed pointer: %w", err)
					}
				}

			}
			// t.Langs ([]string) (slice)
		case "langs":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.Langs: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Langs = make([]string, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					{
						sval, err := cbg.ReadStringWithMax(cr, 1000000)
						if err != nil {
							return err
						}

						t.Langs[i] = string(sval)
					}

				}
			}
			// t.Steps ([]*foodios.FeedRecipeRevision_Step) (slice)
		case "steps":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.Steps: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Steps = make([]*FeedRecipeRevision_Step, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					{

						b, err := cr.ReadByte()
						if err != nil {
							return err
						}
						if b != cbg.CborNull[0] {
							if err := cr.UnreadByte(); err != nil {
								return err
							}
							t.Steps[i] = new(FeedRecipeRevision_Step)
							if err := t.Steps[i].UnmarshalCBOR(cr); err != nil {
								return xerrors.Errorf("unmarshaling t.Steps[i] pointer: %w", err)
							}
						}

					}

				}
			}
			// t.Title (string) (string)
		case "title":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.Title = string(sval)
			}
			// t.Images (foodios.FeedRecipeRevision_Images) (struct)
		case "images":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.Images = new(FeedRecipeRevision_Images)
					if err := t.Images.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.Images pointer: %w", err)
					}
				}

			}
			// t.Labels (foodios.FeedRecipeRevision_Labels) (struct)
		case "labels":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.Labels = new(FeedRecipeRevision_Labels)
					if err := t.Labels.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.Labels pointer: %w", err)
					}
				}

			}
			// t.CreatedAt (string) (string)
		case "createdAt":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.CreatedAt = string(sval)
			}
			// t.Ingredients ([]*foodios.FeedRecipeRevision_Ingredient) (slice)
		case "ingredients":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.Ingredients: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Ingredients = make([]*FeedRecipeRevision_Ingredient, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					{

						b, err := cr.ReadByte()
						if err != nil {
							return err
						}
						if b != cbg.CborNull[0] {
							if err := cr.UnreadByte(); err != nil {
								return err
							}
							t.Ingredients[i] = new(FeedRecipeRevision_Ingredient)
							if err := t.Ingredients[i].UnmarshalCBOR(cr); err != nil {
								return xerrors.Errorf("unmarshaling t.Ingredients[i] pointer: %w", err)
							}
						}

					}

				}
			}
			// t.RecipePostRef (atproto.RepoStrongRef) (struct)
		case "recipePostRef":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.RecipePostRef = new(atproto.RepoStrongRef)
					if err := t.RecipePostRef.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.RecipePostRef pointer: %w", err)
					}
				}

			}
			// t.ParentRevisionRef (atproto.RepoStrongRef) (struct)
		case "parentRevisionRef":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.ParentRevisionRef = new(atproto.RepoStrongRef)
					if err := t.ParentRevisionRef.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.ParentRevisionRef pointer: %w", err)
					}
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *FeedRecipeRevision_Ingredient) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 4

	if t.Images == nil {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.Name (string) (string)
	if len("name") > 1000000 {
		return xerrors.Errorf("Value in field \"name\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("name"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("name")); err != nil {
		return err
	}

	if len(t.Name) > 1000000 {
		return xerrors.Errorf("Value in field t.Name was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Name))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Name)); err != nil {
		return err
	}

	// t.Unit (string) (string)
	if len("unit") > 1000000 {
		return xerrors.Errorf("Value in field \"unit\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("unit"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("unit")); err != nil {
		return err
	}

	if len(t.Unit) > 1000000 {
		return xerrors.Errorf("Value in field t.Unit was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Unit))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Unit)); err != nil {
		return err
	}

	// t.Images (foodios.FeedRecipeRevision_Ingredient_Images) (struct)
	if t.Images != nil {

		if len("images") > 1000000 {
			return xerrors.Errorf("Value in field \"images\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("images"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("images")); err != nil {
			return err
		}

		if err := t.Images.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.Quantity (string) (string)
	if len("quantity") > 1000000 {
		return xerrors.Errorf("Value in field \"quantity\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("quantity"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("quantity")); err != nil {
		return err
	}

	if len(t.Quantity) > 1000000 {
		return xerrors.Errorf("Value in field t.Quantity was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Quantity))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Quantity)); err != nil {
		return err
	}
	return nil
}

func (t *FeedRecipeRevision_Ingredient) UnmarshalCBOR(r io.Reader) (err error) {
	*t = FeedRecipeRevision_Ingredient{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("FeedRecipeRevision_Ingredient: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 8)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 1000000)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Name (string) (string)
		case "name":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.Name = string(sval)
			}
			// t.Unit (string) (string)
		case "unit":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.Unit = string(sval)
			}
			// t.Images (foodios.FeedRecipeRevision_Ingredient_Images) (struct)
		case "images":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.Images = new(FeedRecipeRevision_Ingredient_Images)
					if err := t.Images.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.Images pointer: %w", err)
					}
				}

			}
			// t.Quantity (string) (string)
		case "quantity":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.Quantity = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *FeedRecipeRevision_Step) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 2

	if t.Images == nil {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.Text (string) (string)
	if len("text") > 1000000 {
		return xerrors.Errorf("Value in field \"text\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("text"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("text")); err != nil {
		return err
	}

	if len(t.Text) > 1000000 {
		return xerrors.Errorf("Value in field t.Text was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Text))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Text)); err != nil {
		return err
	}

	// t.Images (foodios.FeedRecipeRevision_Step_Images) (struct)
	if t.Images != nil {

		if len("images") > 1000000 {
			return xerrors.Errorf("Value in field \"images\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("images"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("images")); err != nil {
			return err
		}

		if err := t.Images.MarshalCBOR(cw); err != nil {
			return err
		}
	}
	return nil
}

func (t *FeedRecipeRevision_Step) UnmarshalCBOR(r io.Reader) (err error) {
	*t = FeedRecipeRevision_Step{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("FeedRecipeRevision_Step: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 6)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 1000000)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Text (string) (string)
		case "text":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.Text = string(sval)
			}
			// t.Images (foodios.FeedRecipeRevision_Step_Images) (struct)
		case "images":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.Images = new(FeedRecipeRevision_Step_Images)
					if err := t.Images.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.Images pointer: %w", err)
					}
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
