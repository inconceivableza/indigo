// Code generated by cmd/lexgen (see Makefile's lexgen); DO NOT EDIT.

package foodios

// schema: app.foodios.feed.recipeRevision

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"

	comatprototypes "github.com/bluesky-social/indigo/api/atproto"
	appbskytypes "github.com/bluesky-social/indigo/api/bsky"
	"github.com/bluesky-social/indigo/lex/util"
	cbg "github.com/whyrusleeping/cbor-gen"
)

func init() {
	util.RegisterType("app.foodios.feed.recipeRevision", &FeedRecipeRevision{})
} //
// RECORDTYPE: FeedRecipeRevision
type FeedRecipeRevision struct {
	LexiconTypeID string `json:"$type,const=app.foodios.feed.recipeRevision" cborgen:"$type,const=app.foodios.feed.recipeRevision"`
	// createdAt: Client-declared timestamp when this post was originally created.
	CreatedAt   string                           `json:"createdAt" cborgen:"createdAt"`
	Embed       *FeedRecipeRevision_Embed        `json:"embed,omitempty" cborgen:"embed,omitempty"`
	Images      *FeedRecipeRevision_Images       `json:"images,omitempty" cborgen:"images,omitempty"`
	Ingredients []*FeedRecipeRevision_Ingredient `json:"ingredients" cborgen:"ingredients"`
	// labels: Self-label values for this post. Effectively content warnings.
	Labels *FeedRecipeRevision_Labels `json:"labels,omitempty" cborgen:"labels,omitempty"`
	// langs: Indicates human language of post primary text content.
	Langs             []string                       `json:"langs,omitempty" cborgen:"langs,omitempty"`
	ParentRevisionRef *comatprototypes.RepoStrongRef `json:"parentRevisionRef,omitempty" cborgen:"parentRevisionRef,omitempty"`
	RecipePostRef     *comatprototypes.RepoStrongRef `json:"recipePostRef" cborgen:"recipePostRef"`
	Steps             []*FeedRecipeRevision_Step     `json:"steps" cborgen:"steps"`
	// tags: Additional hashtags, in addition to any included in post text and facets.
	Tags  []string `json:"tags,omitempty" cborgen:"tags,omitempty"`
	Text  string   `json:"text" cborgen:"text"`
	Title string   `json:"title" cborgen:"title"`
}

type FeedRecipeRevision_Embed struct {
	EmbedImages          *appbskytypes.EmbedImages
	EmbedVideo           *appbskytypes.EmbedVideo
	EmbedExternal        *appbskytypes.EmbedExternal
	EmbedRecord          *appbskytypes.EmbedRecord
	EmbedRecordWithMedia *appbskytypes.EmbedRecordWithMedia
}

func (t *FeedRecipeRevision_Embed) MarshalJSON() ([]byte, error) {
	if t.EmbedImages != nil {
		t.EmbedImages.LexiconTypeID = "app.bsky.embed.images"
		return json.Marshal(t.EmbedImages)
	}
	if t.EmbedVideo != nil {
		t.EmbedVideo.LexiconTypeID = "app.bsky.embed.video"
		return json.Marshal(t.EmbedVideo)
	}
	if t.EmbedExternal != nil {
		t.EmbedExternal.LexiconTypeID = "app.bsky.embed.external"
		return json.Marshal(t.EmbedExternal)
	}
	if t.EmbedRecord != nil {
		t.EmbedRecord.LexiconTypeID = "app.bsky.embed.record"
		return json.Marshal(t.EmbedRecord)
	}
	if t.EmbedRecordWithMedia != nil {
		t.EmbedRecordWithMedia.LexiconTypeID = "app.bsky.embed.recordWithMedia"
		return json.Marshal(t.EmbedRecordWithMedia)
	}
	return nil, fmt.Errorf("cannot marshal empty enum")
}
func (t *FeedRecipeRevision_Embed) UnmarshalJSON(b []byte) error {
	typ, err := util.TypeExtract(b)
	if err != nil {
		return err
	}

	switch typ {
	case "app.bsky.embed.images":
		t.EmbedImages = new(appbskytypes.EmbedImages)
		return json.Unmarshal(b, t.EmbedImages)
	case "app.bsky.embed.video":
		t.EmbedVideo = new(appbskytypes.EmbedVideo)
		return json.Unmarshal(b, t.EmbedVideo)
	case "app.bsky.embed.external":
		t.EmbedExternal = new(appbskytypes.EmbedExternal)
		return json.Unmarshal(b, t.EmbedExternal)
	case "app.bsky.embed.record":
		t.EmbedRecord = new(appbskytypes.EmbedRecord)
		return json.Unmarshal(b, t.EmbedRecord)
	case "app.bsky.embed.recordWithMedia":
		t.EmbedRecordWithMedia = new(appbskytypes.EmbedRecordWithMedia)
		return json.Unmarshal(b, t.EmbedRecordWithMedia)

	default:
		return nil
	}
}

func (t *FeedRecipeRevision_Embed) MarshalCBOR(w io.Writer) error {

	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if t.EmbedImages != nil {
		return t.EmbedImages.MarshalCBOR(w)
	}
	if t.EmbedVideo != nil {
		return t.EmbedVideo.MarshalCBOR(w)
	}
	if t.EmbedExternal != nil {
		return t.EmbedExternal.MarshalCBOR(w)
	}
	if t.EmbedRecord != nil {
		return t.EmbedRecord.MarshalCBOR(w)
	}
	if t.EmbedRecordWithMedia != nil {
		return t.EmbedRecordWithMedia.MarshalCBOR(w)
	}
	return fmt.Errorf("cannot cbor marshal empty enum")
}
func (t *FeedRecipeRevision_Embed) UnmarshalCBOR(r io.Reader) error {
	typ, b, err := util.CborTypeExtractReader(r)
	if err != nil {
		return err
	}

	switch typ {
	case "app.bsky.embed.images":
		t.EmbedImages = new(appbskytypes.EmbedImages)
		return t.EmbedImages.UnmarshalCBOR(bytes.NewReader(b))
	case "app.bsky.embed.video":
		t.EmbedVideo = new(appbskytypes.EmbedVideo)
		return t.EmbedVideo.UnmarshalCBOR(bytes.NewReader(b))
	case "app.bsky.embed.external":
		t.EmbedExternal = new(appbskytypes.EmbedExternal)
		return t.EmbedExternal.UnmarshalCBOR(bytes.NewReader(b))
	case "app.bsky.embed.record":
		t.EmbedRecord = new(appbskytypes.EmbedRecord)
		return t.EmbedRecord.UnmarshalCBOR(bytes.NewReader(b))
	case "app.bsky.embed.recordWithMedia":
		t.EmbedRecordWithMedia = new(appbskytypes.EmbedRecordWithMedia)
		return t.EmbedRecordWithMedia.UnmarshalCBOR(bytes.NewReader(b))

	default:
		return nil
	}
}

type FeedRecipeRevision_Images struct {
	EmbedImages *appbskytypes.EmbedImages
	EmbedVideo  *appbskytypes.EmbedVideo
}

func (t *FeedRecipeRevision_Images) MarshalJSON() ([]byte, error) {
	if t.EmbedImages != nil {
		t.EmbedImages.LexiconTypeID = "app.bsky.embed.images"
		return json.Marshal(t.EmbedImages)
	}
	if t.EmbedVideo != nil {
		t.EmbedVideo.LexiconTypeID = "app.bsky.embed.video"
		return json.Marshal(t.EmbedVideo)
	}
	return nil, fmt.Errorf("cannot marshal empty enum")
}
func (t *FeedRecipeRevision_Images) UnmarshalJSON(b []byte) error {
	typ, err := util.TypeExtract(b)
	if err != nil {
		return err
	}

	switch typ {
	case "app.bsky.embed.images":
		t.EmbedImages = new(appbskytypes.EmbedImages)
		return json.Unmarshal(b, t.EmbedImages)
	case "app.bsky.embed.video":
		t.EmbedVideo = new(appbskytypes.EmbedVideo)
		return json.Unmarshal(b, t.EmbedVideo)

	default:
		return nil
	}
}

func (t *FeedRecipeRevision_Images) MarshalCBOR(w io.Writer) error {

	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if t.EmbedImages != nil {
		return t.EmbedImages.MarshalCBOR(w)
	}
	if t.EmbedVideo != nil {
		return t.EmbedVideo.MarshalCBOR(w)
	}
	return fmt.Errorf("cannot cbor marshal empty enum")
}
func (t *FeedRecipeRevision_Images) UnmarshalCBOR(r io.Reader) error {
	typ, b, err := util.CborTypeExtractReader(r)
	if err != nil {
		return err
	}

	switch typ {
	case "app.bsky.embed.images":
		t.EmbedImages = new(appbskytypes.EmbedImages)
		return t.EmbedImages.UnmarshalCBOR(bytes.NewReader(b))
	case "app.bsky.embed.video":
		t.EmbedVideo = new(appbskytypes.EmbedVideo)
		return t.EmbedVideo.UnmarshalCBOR(bytes.NewReader(b))

	default:
		return nil
	}
}

// FeedRecipeRevision_Ingredient is a "ingredient" in the app.foodios.feed.recipeRevision schema.
//
// TODO add description/alternatives properties?
type FeedRecipeRevision_Ingredient struct {
	Images   *FeedRecipeRevision_Ingredient_Images `json:"images,omitempty" cborgen:"images,omitempty"`
	Name     string                                `json:"name" cborgen:"name"`
	Quantity string                                `json:"quantity" cborgen:"quantity"`
	Unit     string                                `json:"unit" cborgen:"unit"`
}

type FeedRecipeRevision_Ingredient_Images struct {
	EmbedImages *appbskytypes.EmbedImages
	EmbedVideo  *appbskytypes.EmbedVideo
}

func (t *FeedRecipeRevision_Ingredient_Images) MarshalJSON() ([]byte, error) {
	if t.EmbedImages != nil {
		t.EmbedImages.LexiconTypeID = "app.bsky.embed.images"
		return json.Marshal(t.EmbedImages)
	}
	if t.EmbedVideo != nil {
		t.EmbedVideo.LexiconTypeID = "app.bsky.embed.video"
		return json.Marshal(t.EmbedVideo)
	}
	return nil, fmt.Errorf("cannot marshal empty enum")
}
func (t *FeedRecipeRevision_Ingredient_Images) UnmarshalJSON(b []byte) error {
	typ, err := util.TypeExtract(b)
	if err != nil {
		return err
	}

	switch typ {
	case "app.bsky.embed.images":
		t.EmbedImages = new(appbskytypes.EmbedImages)
		return json.Unmarshal(b, t.EmbedImages)
	case "app.bsky.embed.video":
		t.EmbedVideo = new(appbskytypes.EmbedVideo)
		return json.Unmarshal(b, t.EmbedVideo)

	default:
		return nil
	}
}

func (t *FeedRecipeRevision_Ingredient_Images) MarshalCBOR(w io.Writer) error {

	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if t.EmbedImages != nil {
		return t.EmbedImages.MarshalCBOR(w)
	}
	if t.EmbedVideo != nil {
		return t.EmbedVideo.MarshalCBOR(w)
	}
	return fmt.Errorf("cannot cbor marshal empty enum")
}
func (t *FeedRecipeRevision_Ingredient_Images) UnmarshalCBOR(r io.Reader) error {
	typ, b, err := util.CborTypeExtractReader(r)
	if err != nil {
		return err
	}

	switch typ {
	case "app.bsky.embed.images":
		t.EmbedImages = new(appbskytypes.EmbedImages)
		return t.EmbedImages.UnmarshalCBOR(bytes.NewReader(b))
	case "app.bsky.embed.video":
		t.EmbedVideo = new(appbskytypes.EmbedVideo)
		return t.EmbedVideo.UnmarshalCBOR(bytes.NewReader(b))

	default:
		return nil
	}
}

// Self-label values for this post. Effectively content warnings.
type FeedRecipeRevision_Labels struct {
	LabelDefs_SelfLabels *comatprototypes.LabelDefs_SelfLabels
}

func (t *FeedRecipeRevision_Labels) MarshalJSON() ([]byte, error) {
	if t.LabelDefs_SelfLabels != nil {
		t.LabelDefs_SelfLabels.LexiconTypeID = "com.atproto.label.defs#selfLabels"
		return json.Marshal(t.LabelDefs_SelfLabels)
	}
	return nil, fmt.Errorf("cannot marshal empty enum")
}
func (t *FeedRecipeRevision_Labels) UnmarshalJSON(b []byte) error {
	typ, err := util.TypeExtract(b)
	if err != nil {
		return err
	}

	switch typ {
	case "com.atproto.label.defs#selfLabels":
		t.LabelDefs_SelfLabels = new(comatprototypes.LabelDefs_SelfLabels)
		return json.Unmarshal(b, t.LabelDefs_SelfLabels)

	default:
		return nil
	}
}

func (t *FeedRecipeRevision_Labels) MarshalCBOR(w io.Writer) error {

	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if t.LabelDefs_SelfLabels != nil {
		return t.LabelDefs_SelfLabels.MarshalCBOR(w)
	}
	return fmt.Errorf("cannot cbor marshal empty enum")
}
func (t *FeedRecipeRevision_Labels) UnmarshalCBOR(r io.Reader) error {
	typ, b, err := util.CborTypeExtractReader(r)
	if err != nil {
		return err
	}

	switch typ {
	case "com.atproto.label.defs#selfLabels":
		t.LabelDefs_SelfLabels = new(comatprototypes.LabelDefs_SelfLabels)
		return t.LabelDefs_SelfLabels.UnmarshalCBOR(bytes.NewReader(b))

	default:
		return nil
	}
}

// FeedRecipeRevision_Step is a "step" in the app.foodios.feed.recipeRevision schema.
type FeedRecipeRevision_Step struct {
	Images *FeedRecipeRevision_Step_Images `json:"images,omitempty" cborgen:"images,omitempty"`
	Text   string                          `json:"text" cborgen:"text"`
}

type FeedRecipeRevision_Step_Images struct {
	EmbedImages *appbskytypes.EmbedImages
	EmbedVideo  *appbskytypes.EmbedVideo
}

func (t *FeedRecipeRevision_Step_Images) MarshalJSON() ([]byte, error) {
	if t.EmbedImages != nil {
		t.EmbedImages.LexiconTypeID = "app.bsky.embed.images"
		return json.Marshal(t.EmbedImages)
	}
	if t.EmbedVideo != nil {
		t.EmbedVideo.LexiconTypeID = "app.bsky.embed.video"
		return json.Marshal(t.EmbedVideo)
	}
	return nil, fmt.Errorf("cannot marshal empty enum")
}
func (t *FeedRecipeRevision_Step_Images) UnmarshalJSON(b []byte) error {
	typ, err := util.TypeExtract(b)
	if err != nil {
		return err
	}

	switch typ {
	case "app.bsky.embed.images":
		t.EmbedImages = new(appbskytypes.EmbedImages)
		return json.Unmarshal(b, t.EmbedImages)
	case "app.bsky.embed.video":
		t.EmbedVideo = new(appbskytypes.EmbedVideo)
		return json.Unmarshal(b, t.EmbedVideo)

	default:
		return nil
	}
}

func (t *FeedRecipeRevision_Step_Images) MarshalCBOR(w io.Writer) error {

	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if t.EmbedImages != nil {
		return t.EmbedImages.MarshalCBOR(w)
	}
	if t.EmbedVideo != nil {
		return t.EmbedVideo.MarshalCBOR(w)
	}
	return fmt.Errorf("cannot cbor marshal empty enum")
}
func (t *FeedRecipeRevision_Step_Images) UnmarshalCBOR(r io.Reader) error {
	typ, b, err := util.CborTypeExtractReader(r)
	if err != nil {
		return err
	}

	switch typ {
	case "app.bsky.embed.images":
		t.EmbedImages = new(appbskytypes.EmbedImages)
		return t.EmbedImages.UnmarshalCBOR(bytes.NewReader(b))
	case "app.bsky.embed.video":
		t.EmbedVideo = new(appbskytypes.EmbedVideo)
		return t.EmbedVideo.UnmarshalCBOR(bytes.NewReader(b))

	default:
		return nil
	}
}
